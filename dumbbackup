#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;
use File::Spec;
use Text::ParseWords 'shellwords';
use POSIX 'strftime';
use Data::Dumper;

my $USAGE =
"Usage: $0 [ --server|target=hostname ] [ --store=dir ] [ --check ] [ --cleanup ] [ --nice=N ] [ --ionice=N ] [ --rsync-opts=OPTS ] [ --exclude=PATTERN ] dir1 dir2 ...";
my %option = (
    store       => '/backup',
    keep_days   => 10,
    keep_months => 6,
);

GetOptions(
    \%option, 'server=s', 'target=s', 'store=s', 'check', 'cleanup', 'debug',
    'nice=i', 'ionice=i', 'exclude=s@', 'keep_months|keep-months=i',
    'keep_days|keep-days=i', 'rsync_opts|rsync-opts=s',
) or die $USAGE;

# various parameters
my @cmd;
my @filters = map "--exclude=$_", @{ $option{exclude} };
my $today = strftime "%Y-%m-%d", localtime;
my $dest = "$option{store}/$today";
my @backups;
if ( $option{server} ) {
    @backups = grep $_ ne $dest, sort split /\n/,
      qx{ssh $option{server} ls -d $option{store}/????-??-??};
    $dest = "$option{server}:$dest";
}
else {
    @backups = grep $_ ne $dest, sort grep -d,
        glob "$option{store}/????-??-??";
    push @filters, "--exclude=$option{store}";
}

# rsync options
my @rsync_opts = qw( -aH --partial --numeric-ids );
push @rsync_opts, shellwords( $option{rsync_opts} ) if $option{rsync_opts};
push @rsync_opts, map "--link-dest=$_", reverse @backups if @backups;

# remaining arguments are a list of directories to backup
my @src;
for (@ARGV) {    # assume Unix-like directories with no trailing slash
    push @src, join ':', $option{target} || (), $_;
    s{/$}{};
    push @filters, "--include=$_/**";
    my @dirs = File::Spec->splitdir($_);
    while (@dirs) {
        pop @dirs;
        my $dir = File::Spec->catdir(@dirs);
        push @filters, "--include=$dir" if $dir;
    }
}
push @filters, '--exclude=*';
@filters = do { my %seen; grep !$seen{$_}++, @filters };

# handle niceness
my @nice = (
  ( nice   => '-n', $option{nice}   )x!! $option{nice},
  ( ionice => '-c', $option{ionice} )x!! $option{ionice}
);
if ( $option{target} && @nice ) {
    push @rsync_opts, "--rsync-path=@nice rsync";
}
else {
    unshift @cmd, @nice;
}

# build the rsync command
push @cmd, rsync => @rsync_opts, @filters, @src, $dest;

if( $option{check} ) {
    print $option{debug} ? Data::Dumper->Dump( [ \@cmd ], [ '*cmd' ] ) : "@cmd\n";
}
else{
   system @cmd;
}

# cleanup
if ( $option{cleanup} ) {
    local $Data::Dumper::Indent = 0;
    my ( %m, %k );
    /\b(\d{4}-\d{2})-\d{2}$/ and push @{ $m{$1} }, $_ for @backups;
    $k{$_}++ for grep $_, ( reverse @backups )[ 0 .. $option{keep_days} - 1 ];
    $k{ $m{$_}[0] }++
      for grep $_, ( reverse sort keys %m )[ 0 .. $option{keep_months} - 1 ];
    for my $bye ( grep !$k{$_}, @backups ) {
        my @rm = (
            $option{server} ? ( ssh => $option{server} ) : (), @nice,
            rm => '-rf',
            $bye
        );
        if ( $option{check} ) {
            print $option{debug} ? Data::Dumper->Dump( [ \@rm ], [ '*rm' ] ) : "@rm", "\n";
        }
        else {
            system @rm;
        }
    }
}
